Default Flow Rule (in switch_features_handler)

match = dp.ofproto_parser.OFPMatch()
actions = [dp.ofproto_parser.OFPActionOutput(dp.ofproto.OFPP_CONTROLLER, dp.ofproto.OFPCML_NO_BUFFER)]


Purpose: Send all unmatched packets to the controller.

Helps with:

Learning topology dynamically (like discovering source MACs via packet_in_handler)

Reacting to unknown flows (e.g., when predictions come in and flows must be updated)



Flow Rule via add_flow

self.add_flow(dp, priority, match, actions, idle_timeout, hard_timeout)
Used in multiple places (like default rule, rerouting, special flows).

Parameters:

priority: Determines which rule takes precedence.

match: What kind of traffic to apply the rule to (e.g., in_port).

actions: How to handle matched packets (e.g., forward to port).

Timeouts:

idle_timeout: Flow expires if inactive.

hard_timeout: Flow expires regardless.

This helps enforce temporary rerouting or prioritized behavior, driven by real-time ML predictions.




 Rerouting Rules (in reroute_ap_traffic)

match = parser.OFPMatch(in_port=1)
actions = [parser.OFPActionOutput(2)]
If an AP (e.g., from_ap) is predicted to be congested, traffic entering on port 1 is rerouted to port 2 (assumed to reach to_ap).

Before applying the new flow:

Existing flows matching the same in_port are deleted (delete_flows) to avoid conflict.

Purpose: Reduce congestion by offloading traffic to the least congested AP.

 SDN decision logic is now reactive and intelligent—routed based on predictive congestion data rather than static rules or manual thresholds.



Special Prediction-Based Flows (in handle_prediction and install_special_flow)

match = parser.OFPMatch()  # Could be enhanced to match src_mac or node_id
actions = [parser.OFPActionOutput(ofproto.OFPP_CONTROLLER)]
When the controller receives an ML prediction (node_id → predicted_ap), it may proactively install a "special" flow on the predicted AP.

This can be extended to match specific node traffic and forward accordingly (e.g., install per-node rules).



| Feature                 | Description                                         | Contribution to SDN Decision                                 |
| ----------------------- | --------------------------------------------------- | ------------------------------------------------------------ |
| **UDP-based ML input**  | Receives real-time predictions about AP congestion  | Gives controller a data-driven basis for traffic engineering |
| **Flow install/delete** | Dynamically adds or removes rules                   | Enables real-time adaptation to changing conditions          |
| **Congestion scoring**  | Combines latency, packet rate, etc.                 | Makes the choice of "least congested AP" intelligent         |
| **Timeouts**            | Flow entries expire if not used or after fixed time | Keeps the flow table clean and avoids state rules            |
| **Special flows**       | Handles node-specific predictions                   | Enables proactive optimization before congestion occurs      |
